package com.waracle.cakemgr.dto.request;

import jakarta.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

/**
 * Data Transfer Object (DTO) representing a Cake.
 * <p>
 * This class is used to transfer cake-related data between different layers
 * of the application, typically between the client and the server or between
 * the controller and service layers.
 * </p>
 * <p>
 * It extends {@link CakeServiceRequestDTO}, inheriting the fields {@code name},
 * {@code price}, and {@code description}, and adds a {@code cakeId} to uniquely
 * identify a cake in the system.
 * </p>
 * <p>
 * The class is annotated with {@code @XmlRootElement} to support both JSON and
 * XML serialization and implements {@link Serializable} to allow the object to be
 * transmitted across networks or stored in caches.
 * </p>
 *
 * <p>Typical use cases:</p>
 * <ul>
 *   <li>As a response object when retrieving cake information</li>
 *   <li>In update operations where an ID is required</li>
 * </ul>
 *
 * @see CakeServiceRequestDTO
 * @see com.waracle.cakemgr.service.CakeService
 *
 * @author
 *     Omkar Tamboli
 */
@XmlRootElement(name = "CakeDTO")
public class CakeDTO extends CakeServiceRequestDTO implements Serializable {

    private static final long serialVersionUID = 1L;

    /**
     * Unique identifier for the cake.
     * Typically auto-generated by the database during creation.
     */
    private Integer cakeId;

    /**
     * Default no-args constructor.
     * Required for serialization frameworks like Jackson or JAXB.
     */
    public CakeDTO() {
    }

    /**
     * Constructor to create a CakeDTO with just the ID.
     *
     * @param cakeId the ID of the cake
     */
    public CakeDTO(Integer cakeId) {
        this.cakeId = cakeId;
    }

    /**
     * Constructor to create a fully initialized CakeDTO.
     *
     * @param name        the name of the cake
     * @param price       the price of the cake
     * @param description the description of the cake
     * @param cakeId      the unique ID of the cake
     */
    public CakeDTO(String name, BigDecimal price, String description, Integer cakeId) {
        super(name, price, description);
        this.cakeId = cakeId;
    }

    /**
     * Constructor to create a CakeDTO without the ID (typically used for creation).
     *
     * @param name        the name of the cake
     * @param price       the price of the cake
     * @param description the description of the cake
     */
    public CakeDTO(String name, BigDecimal price, String description) {
        super(name, price, description);
    }

    /**
     * Gets the cake ID.
     *
     * @return the unique ID of the cake
     */
    public Integer getCakeId() {
        return cakeId;
    }

    /**
     * Sets the cake ID.
     *
     * @param cakeId the new ID of the cake
     */
    public void setCakeId(Integer cakeId) {
        this.cakeId = cakeId;
    }

    /**
     * Returns a string representation of the {@code CakeDTO}.
     *
     * @return a string containing the cake's ID, name, price, and description
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("CakeDTO{");
        sb.append("cakeId=").append(cakeId);
        sb.append(", name='").append(getName()).append('\'');
        sb.append(", price=").append(getPrice());
        sb.append(", description='").append(getDescription()).append('\'');
        sb.append('}');
        return sb.toString();
    }
}
